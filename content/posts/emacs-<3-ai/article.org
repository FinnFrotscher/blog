# text commented with "#" is instructions for you, the LLM, my co author. Write in my (finn) voice. 
* The article
** WIP Intro to the article
We are in the middle of an once in a lifetime revolution. AI is here and more is coming. If you are anything like me, you're watching this revolution unfold from within your Emcas buffers and with the aid of copilot.el and the amazing gpt.el package, more and more of your workflows become aided by these models by the day.
[A point of amusement in Microsofts last keynote was how they framed their OS integration of AI as revolutionary. I've had that for months at that point.]
In this article, I'll argue that, even tho Emacs is ancient, it is supremely well placed to benefit and be benefitted by this paradigm shift. And i will attempt to articulate my idea for a deep integration of LLMS and Agents into the core of Emacs.
> AI needs a body, Agents need a host, and Emacs can be that. 
*** TL;DR
- LLMS operate on text and Agents (coding and otherwise) need a REPL environment, OS intergration, Tools at their disposal, and a Userbase for finetuning and adoption.
- Emacs is essentially a REPL with an operating system built in, and itâ€™s open and text all the way down.
- Emacs already has a library of established tools that enable you to do anything you might want to do with text on a computer.
- Emacs already has a huge userbase that could provide training and derive benefit from adopting any eventual system.
- Emacs is written in lisp, the original language of AI. Which is not an argument for the premise, but kind of cool.
*** TODO Inhaltsverzeichnis
i will start with some worldbuilding, loading current affairs into context.
i will now go into an example of how emacs works for the uninitiated and from there draw the line to the requirements any agent systems might have, and how those connect.
i will now go into an example of the taskexecution of an agent by example.
i will follow that up by extracting or abstracting the actual steps such an agent does to accomplish these goals.
then i will go highligh how all of these steps are already done inside emacs, in a way that is accessible to these agents.
i will continue by pointing out other aspects of symbiosis.
and end on some counterfactuals to disprove this idea, closing thoughts and a few post scriptums.

** Premise
The world is changing. The age old promise of AI is manifesting rapidly infront of our very eyes.
As AI becomes more prevalent, it will handle an increasing amount of coding and execution tasks, while humans bring the intent, judge the design, and drive itteration. A symbiotic relationship will form between humans and AI systems, with human intent being the keyword. Humans bring intent, agents execute, and humans then judge and articulate the delta between the goal and the outcome, driving improvements through iteration.
So far, we've seen AI handle single-file edits, but it hasn't progressed beyond script-kiddy-level tasks (altho very knowledgeable script kiddy). However, that moment will come. The driving factors behind this progression are well-established, including increasing context length, shrinking modelsizes and graph-of-thought approaches like CoT and ToT. More improvements are continously dripping in. 
At some point in the near future AI Systems will be able to: create and maintain complex applications at a level of quality that is acceptable for a number of use cases; and all the factors listed in this sentence will increase with time exponentially.

This process of symbiotic creation needs to be facilitated in some environment. These systems need to live somewhere. They require an environment to run in where they have tools that they are familiar with (finetuned to), where they are run, controlled, and managed. To me, it doesn't feel entirely strange to say that they need a body - something through which they can act on the world, communicate up and down, self-reflect, think, and memorize.

Microsoft will build out Visual Studio Code, "Open"AI has already launched their first MVP of their solution with their plugins and especially the code executer, and countless startups will join the race too. But as highlighted in the leaked Google memo, open-source is the winning horse in this competition. 

Emacs could be adopted to be that environment, that body. why is that a good idea?

** DRAFT why emacs <3 ai?
Emacs is a great candidate to build an AI agent system into and on top of, because of four reasons. it can already handle all the jobs-to-be-done in working with agents, its will proove to be fertile ground for long term development of the symbiosis, it has a massive ecosystem advantage, and its right there for the taking, for free. 
Let me go into these arguments in some depth.
*** 1. Emacs is fully equipped to handle all jobs-to-be-done for working with agents
Emacs's interactivity, adaptability, and extensibility enable it to handle any tasks or challenges associated with agent management and execution. Lets look at what it takes to run agents. I've broken it down into 3 different areas, the first from the human operator perspective and the second and third from the agent perspective. 
**** a. control and observability of agents
Imagine you want to instantiate, direct, observe, control, and terminate an AI agent within Emacs. Here's how it might look like:

1. Instantiate the agent:
In an Emacs buffer or an org-mode file, define the goal or directive for your AI agent. Then call a custom-built Emacs function, say =start-agent=, that sets up the AI agent with the given parameters.

#+begin_src lisp
(start-agent :goal "Goal/Directive" :resource_limit 10 :priority "high")
#+end_src

2. Direct the agent:
Using the custom interface elements or dedicated buffers created by =start-agent=, interactively update agent parameters or alter its current task or direction. The AI agent will respond in real-time, adapting its execution plans based on your input.

3. Observe the agent:
Use the Emacs buffers or interface elements designed for agent monitoring to review the agent's progress, resource usage, and output. This provides valuable insight into the agent's behavior and work being done.

4. Control the agent:
As you get real-time updates, you might decide to pause the agent, intervene in its execution, or modify its priorities. Custom-built Emacs functions tied to specific AI agent actions, like =pause-agent= or =resume-agent=, would allow seamless control over agent execution.

#+begin_src lisp
(pause-agent :agent_id <agent_id>)
(resume-agent :agent_id <agent_id>)
#+end_src

5. Terminate the agent:
When the task is completed, or you decide to stop the agent, you can use a custom function like =stop-agent= to terminate the AI agent, free resources, and close the related buffers or interface elements.

#+begin_src lisp
(stop-agent :agent_id <agent_id>)
#+end_src

This integrated approach, combined with Emacs' inherent flexibility, would enable users to conveniently manage AI agents within the native Emacs environment, resulting in a more accessible, seamless, and powerful AI-driven development experience.

**** b. agent doing a thing
1. Collect and analyze data about successful artists: The agent leverages Emacs packages such as 'request.el', 'esxml-query', and 'emacsql-sqlite' to build a custom web crawler that retrieves artist information from various sources. The fetched data is parsed and stored in an SQLite database built within Emacs for easy retrieval and further processing. Then, the agent uses Emacs' integration with popular data analysis tools like R (using the 'ess' package) or Python (using the 'elpy' package) for subsequent data analysis tasks.

```emacs-lisp
(require 'request)
(require 'esxml-query)
(require 'emacsql-sqlite)

;; Set up the SQLite Database and build the custom crawler here (not shown for brevity)

;; Fetch artist information from the list of target websites
(dolist (url *list-of-urls*)
  (request
   url
   :parser 'buffer-string
   :success (cl-function
             (lambda (&key data &allow-other-keys)
               (let ((artist-info (extract-artist-info data)))
                 (insert-artist-into-db db artist-info))))))
```

By adapting the first subtask with a custom-built web crawler, the agent demonstrates its ability to access and process information from multiple sources within the Emacs environment. The agent collects and analyzes this data to identify patterns and discover promising artists in the art market using only Emacs and its ecosystem of packages and tools.

2. Identify emerging artists: With the obtained patterns from the analysis, the agent queries APIs or databases to find up-and-coming artists that fit those patterns.

```emacs-lisp
(request
 "https://art_db_api.example/emerging_artists"
 :params `(,@(extract-criteria analysis)))
```

3. Purchase art from selected artists: The agent coordinates the acquisition of artwork by securely communicating with a banker and an art broker using Emacs packages such as 'smtpmail' for sending encrypted and authenticated emails.

```emacs-lisp
(require 'smtpmail)
(require 'message)

;; Email Details
(setq purchase-details "Purchase information with item IDs, prices, and sellers.")

;; Notify Banker
(send-email "banker@example.com" "Art purchase authorization" purchase-details)

;; Notify Art Broker
(send-email "broker@example.com" "Request to buy art pieces" purchase-details)
```

In this example, the agent relies on Emacs and its power to perform complex tasks by breaking them down into smaller subtasks and executing them within Emacs itself. By harnessing Emacs' versatility, the agent can not only
**** c. agent building a thing
In this example, the AI agent combines the objectives of creating a software application and designing a website to build and deploy a mobile app that provides insights into emerging artists and allows users to purchase artwork. We assume that the app development and deployment are targeting the Apple App Store. Here's how an agent living in Emacs can leverage its features to achieve this goal:

1. Gather and analyze requirements: Extend the existing artist data model, schema, and API endpoint to fit the desired app functionalities. This includes additional data fields for each artist and artwork, as well as artist discovery and purchase API endpoints.

2. Design the user interface: Use sketch plugins like 'sketch-el' package, to create a wireframe and design of the app's interface within Emacs. Utilize the mobile platform's design guidelines (e.g., Apple's Human Interface Guidelines) to ensure a professional and consistent look and feel.

3. Develop the app: Leverage the 'react-native.el' package to interact with React Native, a cross-platform mobile app development framework within Emacs. Using Emacs' editing capabilities along with React Native, create and edit components, manage state, handle navigation, and implement the desired app functionalities.

```emacs-lisp
;; Set up the React Native project
(react-native-init "ArtApp")

;; Change the current directory
(cd "ArtApp")

;; Install required packages for the app
(react-native-install '(@react-navigation/native @react-navigation/stack axios))

;; Start building app components and functionalities in Emacs using the react-native.el package
```

4. Test the app: Use Emacs and 'appium.el' package to interact with Appium, an open-source test automation framework, to create and run tests. Identify bugs and issues in the app logic or user interface and refine the implementation accordingly.

5. Compile and package the app: Run standard React Native build tools to compile the production-ready app, ensuring all platform-specific assets, such as icons and splash screens, are included.

6. Prepare for app store submission: Create and manage necessary app metadata, promotional materials, and requirements, such as app icons, screenshots, descriptions, and preview videos within Emacs. Additionally, ensure that the app complies with the App Store's guidelines and policies.

7. Deploy the app: Sign the app with an Apple developer certificate using Emacs' integration with the 'codesign' command-line utility. Submit the compiled app, along with its required metadata, to the App Store using Emacs' integration with 'altool' or 'fastlane' tools.

In this example, the AI agent uses Emacs' comprehensive ecosystem to build and deploy a mobile app that
*** 2. Emacs is a great host environment that provides fertile ground for AI agents:
Emacs is an exceptional choice for building an AI agent system due to its openness, flexibility, and well-developed ecosystem. Its open nature fosters symbiotic relationships between AI and users, which no other tool can offer. The execution environment in Emacs is live, interactive, and open, allowing both users and AI agents to access, modify, and observe the entire state of the system at runtime. Moreover, this fully extensible environment empowers AI agents to adapt more efficiently, monitor user interactions, and provide personalized solutions.

1. Dynamic objectives and prompts: The open REPL and runtime environment in Emacs enables users and AI agents to adapt their collaboration by changing objectives and adjusting the prompts to incorporate user feedback without restarting. This helps fine-tune the agent's understanding of the user's intent and ensures the generation of more relevant responses.

2. Flexible reasoning approach: Users and agents can optimize their reasoning strategies on-the-fly. They can switch from a chain of thought to a tree of thought approach, for example, based on the complexity of the problem or the user's preferred way of thinking. This adaptability leads to more effective problem-solving within Emacs' live environment.

3. Adaptable models and capabilities: Emacs' open architecture allows users and agents to readily switch and provision new models or add entirely new features in real time. For instance, they can incorporate a flow for stable diffusion if it better suits the task at hand. This adaptability accelerates the integration of additional functionalities and helps deliver the desired outcomes more effectively.

Ultimately, Emacs presents itself as an ideal environment for AI agents to work seamlessly with users, offering a level of flexibility and accessibility that is unmatched by other tools like Visual Studio Code.

*** 3. Ecosystem advantage
The extensive Emacs ecosystem and userbase offer a massive advantage for tooling and adoption:

Tools already available:
The vast library of plugins and tools available in the Emacs ecosystem serves as a rich resource for AI agent systems, granting them a considerable head start against other competing solutions.

Userbase for adoption and training:
Additionally, the diverse and passionate Emacs userbase not only brings a wealth of domain-specific knowledge and coding practices but also boasts a collaborative mindset that can accelerate the adoption and success of AI agent systems. This significant advantage makes Emacs a compelling choice in the race to harness the power of AI for more efficient, innovative, and collaborative software development.

Embracing these three aspects, Emacs can be adopted as the environment and body for AI agent systems, unlocking new levels of productivity, creativity, and collaboration among its users while shaping the future of programming and editor ecosystems.
it would be the Open Source communities greates chess move at the current time to start to dethrone "Open"AI.

**** emacs already has a library to do anything you might want to do with text on a computer.
Emacs would have a head start in terms of tooling and functionality compared to "Open"AI, which is still bootstrapping its plugin ecosystem.

 We already have an enormous library of plugins over a wide array of problems and application that can be used by an Agent System. Which would immidiately make it an extremely powerful tool for us to use.

We are talking about everything from org-mode and email clients to interfaces with languages, various domain-specific tools like scientific calculators, statistical software, web browsers, and a lot more. They are all built using Lisp, which means that every capability is accessible through callable functions in the open REPL environment. This offers unmatched breadth, depth and power for an agent.

It's worth noting that other editors often lack key features, like an integrated email client or the ability to control the editor through functions using text input in a REPL. Yet, Emacs offers these. Emacs provides a lot of resources that cover virtually anything one might want to do with text, giving it a meaningful head start ahead of any other ecosystem.

**** Emacs already has a huge userbase that could train and use these agents.
Emacs would also have a head start in terms of userbase and access to data ahead of any other tool or player.

The vast Emacs userbase spans industries, bringing diverse coding practices, workflows, and domain-specific knowledge to the table. This diversity increases the potential for the Agents to learn quickly and to provide more competent assistance, ultimately improving the AI's effectiveness in various contexts.

Members of the Emacs community are often eager to share their knowledge, tools, and experiences to help others improve their workflow. This collaborative mindset will be key to accelerating the adoption and success of any Agent system within Emacs. 

Emacs' long history of adaptability and resilience offers a solid foundation upon which this can be built. The text editor / operating system has evolved over decades, embracing new technologies and meeting the needs of users across generations. This adaptability bodes well for Emacs' ability to successfully pull off this ambitious move.

Given runaway effects of AI, the potential of self optimization (see post-script), and the prevailing winner-take-all dynamics of the internet, this could steal the show from other, less "Open" AI players at a critical moment. Players that are not as open as emacs. 

Also Emacs has a lot of users that could use and would benefit immidiately from this.


** Emacs is written in lisp, the original language of AI. Not an argument for the premise, but cool.
Lisp (short for "List Processing") is considered one of the original programming languages used for artificial intelligence. It was developed in the late 1950s by John McCarthy, an early pioneer of AI. Many early AI systems, such as SHRDLU and the General Problem Solver, were written in Lisp due to its flexibility and expressiveness. Many books on ai use lisp like "paradigms of artificial intelligence programming" by peter norvig.

While Lisp's status as the original language of AI is no argument for the premise of this article, it does provide an interesting link between Emacs' past, our current situation, and our potential future.
To recognize Lisp's historical significance and its deep roots in the AI domain at this historic moment feels beautiful to me. Again, no argument for the premise, just a systems-aesthetic-ish observation that I find interesting.

Embracing Lisp as part of Emacs' heritage symbolically weaves in AI's early days into the absolute beast of tool that AI has become. That seems pretty to me.
[universe written in lisp]


** What might that look like?
Imagine an Emacs package designed to feed coding activities, such as function calls, code outputs, and git-related actions into a  AI model tailored for Emacs. As more developers adopt the package and contribute to its training, the AI will become increasingly adept at not just assisting with coding tasks, but also adapting to diverse preferences and requirements, providing highly personalized and versatile support.
By integrating this AI-driven package into the development process, the Emacs environment would transform into a powerhouse of cutting-edge assistance. This collective effort would enable greater efficiency, foster innovation, and encourage collaboration within the community, taking Emacs to new heights and shaping the future of computing.

** Why Emacs might not be the perfect candidate for an AI fusion?
First up, Emacs is single-threaded and doesn't have a GPU interface. But thats either solveable or could be worked around. What I see as bigger obstacles are the documentation, the difficulty of reading the codebase and the lack of a /modern/ community hubs.

For the documentation, I know its "self-documenting", but I find it extremely hard to understand how to use these self-documented features as they state facts and usually fall short on usage examples and guides. Nothing about the documentation comes close to what is outlined as good documentation in 4 types of "documentation" by divio https://documentation.divio.com/. Which is especially obsturcting since, ...

Emacs' codebase is filled with ancient conventions that are pretty much booby traps waiting for newcomers. Emacs being double my age brings with it some baggage. I fear this might cause a lot of friction for new developers who might want to contribute to the project and develop an Agent System like this.

Lastly, let's touch on the privacy. The Idea of an AI trained on my emacs instance is both scary and sensitive from a privacy perspective. There are ways to solve this (like sharded training and other distributed approaches), but they require a lot of work and are not trivial to implement. 

I generally take with David Deutsch's "On Optimism" on this issue. Embracing development and staying on the cutting edge of innovation as a way to defend again malignant actors and face unforseen challanges. It is imperative that we prioritize the creation and utilization of fundamental capabilities, along with promoting the values of criticism, critical thinking, error-correction, and open dialogue. I ask myself wheather I would rather see these capabilities in "Open"AI's hands.
** end of the article
The open-source community has been presented with a unique opportunity to shape the future of programming and text editing by integrating AI with Emacs. As the AI revolution gathers pace, Emacs**** n unite its rich heritage rooted in Lisp and its powerful, versatile nature to become a trailblazer in the AI-driven era of development. It's time to seize this moment, harness the power of AI, and invest our passion and skills in creating an AI-infused Emacs that elevates it to new heights and shapes the future of computing. Let us strive forward together, embracing optimism and innovation, as we combine our efforts to transform the way we interact with technology and forge a new, unprecedented AI-driven future for Emacs and its users.

Yes this last paragraph was written by GPT4. I couldnt resist. Anyways. I think its a cool thought. Emacs can be the operating system of AI. This community was dealt an amazing hand. Its time to play


